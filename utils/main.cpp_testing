#include <string>
#include <vector>
#include "settings.h"
#include "newick_reader.h"
#include "node.h"
#include "fasta_reader.h"
#include "model_factory.h"
#include "dna_model.h"

using namespace std;

using namespace ppa;

bool DEBUG = false;

int main(int argc, char *argv[])
{

    Settings st;
    int rv = st.read_command_line_arguments(argc, argv);

    if(st.is("treefile")){
        string treefile =  st.get("treefile").as<string>();
        cout<<"Tree file: "<<treefile<<endl;

        Newick_reader nr;
        string tree = nr.read_tree(treefile);
        Node *root = nr.parenthesis_to_tree(tree);
        cout<<"\n"<<root->print_tree()<<"\n";

    }

    if(st.is("seqfile")){
        string seqfile =  st.get("seqfile").as<string>();
        cout<<"Sequence infile: "<<seqfile<<endl;

        Fasta_reader fr;
        fr.set_chars_by_line(70);
        vector<Fasta_entry> seqs;
        fr.read(seqfile, seqs, true);

        bool ok = fr.check_alphabet("ACGT","ACGTRYMKWSBDHVN",seqs);
        if(!ok)cout<<"Illegal characters removed"<<endl;
        float *pi = fr.base_frequencies();

        for(int i=0;i<4;i++)
            cout<<pi[i]<<" ";
        cout<<"\n";

        if(st.is("outfile")){
            string outfile =  st.get("outfile").as<string>();
            cout<<"Sequence outfile: "<<outfile<<endl;

            fr.write(outfile, seqs, true);
        }
    }

//    Model_factory mf;
//
//    float pi[] = {0.25,0.25,0.25,0.25};
//    float rho = 1.0;
//    float kappa = 2.0;
//    float id_rate = 0.1;
//    float ext_prob = 0.5;
//
//    mf.dna_model(pi,kappa,rho,id_rate,ext_prob);
//    Dna_model model = mf.dna_alignment_model(0.1);
//    Dna_model model2 = mf.dna_alignment_model(0.2);
//
//    mf.print_dna_p_matrices(model);
//    mf.print_dna_p_matrices(model2);

}
/*

  Make a factory that gioves models.
  Both DNA and codon.
  Many?
*/
